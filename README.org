* Object-relational Mapping (ORM)
To better interact with persistant data it is often useful to apply a layer of abstraction which allows us interface in the native language of our backend application as opposed to simply forwarding raw queries to our database.\\
One such abstraction is a technique known as "object-relational mapping" (ORM). ORMs seek to represent the structure of relational databases in the form of object-oriented design. Once this abstraction is applied, one may easily perform database operations in the context of our chosen application language.
** Motivation
*** Setup
To demonstrate the motivation and application of a simple ORM, let us first establish a binding between a database and our application.
We first initialize a new node module and create a dedicated database directory to house our db file.
#+BEGIN_SRC console
$ npm init -y
$ npm install sqlite3
$ mkdir db
#+END_SRC
Next we import the sqlite3 package which allows us to interact with a SQLite database within a nodeJS application.
#+NAME: main.js
#+BEGIN_SRC js
const sqlite3 = require("sqlite3");

// open instance to database
const db = new sqlite3.Database("./db/test.db");

// close connection and deallocate resources
db.close((err) => {
  if (err) throw new Error(err);
  console.log("Closed database connection.");
});
#+END_SRC
If we simply run our code
#+BEGIN_SRC console
$ node main.js
#+END_SRC
We can immediately see that an sqlite3 database has been created by virtue of instantiating a connection via Database method.
#+BEGIN_SRC console
$ ls ./db
> test.db
#+END_SRC

*** Raw SQL Interaction
**** Creating Tables
Now that an interface to our SQLite database exists, we can forward raw SQL instructions. Suppose we were creating an application for veterinary clinic. One could imagine a set of tables such as Pet, Veterinarian, Owner, Appointment, etc... Let's first define a sensible set of SQL commands to create these tables.
#+BEGIN_SRC js
const petTableSQL = `CREATE TABLE IF NOT EXISTS Pet (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  species TEXT NOT NULL,
  breed TEXT NOT NULL,
  owner_id INTEGER,
  FOREIGN KEY (owner_id) REFERENCES Owner (id)
)`;
const ownTableSQL = `CREATE TABLE IF NOT EXISTS Owner (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  phone INTEGER NOT NULL UNIQUE,
  address TEXT
)`;
const vetTableSQL = `CREATE TABLE IF NOT EXISTS Veterinarian (
  id INTEGER PRIMARY KEY,
  name text
)`;
// NOTE: We will apply UNIX epoch time in our table!
const appTableSQL = `CREATE TABLE IF NOT EXISTS Appointment (
  id INTEGER PRIMARY KEY,
  date INTEGER NOT NULL,
  pet_id INTEGER NOT NULL,
  vet_id INTEGER NOT NULL,
  FOREIGN KEY (vet_id) REFERENCES Veterinarian (id),
  FOREIGN KEY (pet_id) REFERENCES Pet (id)
)`;
#+END_SRC
Note that all we are doing is defining the raw SQL commands which we would execute via the sqlite3 interpreter in the form of strings. We now FORWARD these RAW commands by making use of methods on our db connection.
#+BEGIN_SRC js
db.serialize(() => {
  db.run(petTableSQL, err => {
    console.log(petTableSQL);
    if (err) console.error(err.message);
  });
  db.run(vetTableSQL, err => {
    console.log(vetTableSQL);
    if (err) console.error(err.message);
  });
  db.run(ownTableSQL, err => {
    console.log(ownTableSQL);
    if (err) console.error(err.message);
  });
  db.run(appTableSQL, err => {
    console.log(appTableSQL);
    if (err) console.error(err.message);
  });
});
#+END_SRC
serialize() method enforces synchronous execution in its callback--were we to not wrap our run() methods in this fashion, we would have no guarantee that a given instruction was completed before moving on to the next. run() method also takes a callback as its second argument, exposing errors received from the sqlite3 interpreter to our application. In this example, if an error occurs, we simply write to console. Also note that we log the SQL statement itself, this is very useful for debugging purposes.
At this point, the entirety of our source code should look as follows:
#+NAME: main.js
#+BEGIN_SRC js
const sqlite3 = require("sqlite3");

const db = new sqlite3.Database("./db/test.db", err => {
  if (err) console.error(err.message);
  console.log("Connected to database.");
});

const petTableSQL = `CREATE TABLE IF NOT EXISTS Pet (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  species TEXT NOT NULL,
  breed TEXT NOT NULL,
  owner_id INTEGER,
  FOREIGN KEY (owner_id) REFERENCES Owner (id)
)`;
const ownTableSQL = `CREATE TABLE IF NOT EXISTS Owner (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  phone INTEGER NOT NULL,
  address TEXT
)`;
const vetTableSQL = `CREATE TABLE IF NOT EXISTS Veterinarian (
  id INTEGER PRIMARY KEY,
  name text
)`;
// NOTE: We will apply UNIX epoch time in our table!
const appTableSQL = `CREATE TABLE IF NOT EXISTS Appointment (
  id INTEGER PRIMARY KEY,
  date INTEGER NOT NULL,
  pet_id INTEGER NOT NULL,
  vet_id INTEGER NOT NULL,
  FOREIGN KEY (vet_id) REFERENCES Veterinarian (id),
  FOREIGN KEY (pet_id) REFERENCES Pet (id)
)`;

db.serialize(() => {
  db.run(petTableSQL, err => {
    if (err) console.error(err.message);
  });
  db.run(vetTableSQL, err => {
    if (err) console.error(err.message);
  });
  db.run(ownTableSQL, err => {
    if (err) console.error(err.message);
  });
  db.run(appTableSQL, err => {
    if (err) console.error(err.message);
  });
});

db.close((err) => {
  if (err) console.error(err.message);
  console.log("Closed database connection.");
});
#+END_SRC
Before executing our code once more, we must do something about the existing database we have created. This presents the first issue in our chosen design. We can, of course, arbitrarily drop our tables at will--we can even delete the database itself. However, this is clearly an issue as one can imagine a situation in which we wish to "migrate" any existing table entries to our new schema. Mitigating this issue is not a trivial issue. We could, in principle, implement the logic of table alterations in our code without data loss as we will see shortly. For the time being, we will simply delete our database and run our code again.
#+BEGIN_SRC console
$ rm db/test.db && node main.js
$ sqlite3 db/test.db ".schema"
#+END_SRC
Examining output from sqlite3 we should now see that we have successfully implemented our simple schema.

**** Inserting Some Seed Data
Now that we have tables, let's store some data. Within our serialize() callback, after we have ran the table creation commands, we will add (seed) some owners.
#+BEGIN_SRC js
 // previous code ... 
    const ownSeedSQL =  `INSERT INTO Owner (name, phone, address) VALUES
      ("Ziggy", 5552349999, "123 Hello Lane"),
      ("Soon-Mi", 5552349922, "321 World Street"),
      ("Adrian", 5551108765, "312 Degraf Way")`;

  db.serialize(() => {
    // previous code ... 
    db.run(ownSeedSQL, err => {
      if (err) console.error(err.message);
    });
  });
#+END_SRC
After running our code we examine our DB and note that our data now exists.
#+BEGIN_SRC console
$ sqlite3 db/test.db "SELECT * FROM Owner"
>>>
1|Ziggy|5552349999|123 Hello Lane
2|Soon-Mi|5552349922|321 World Street
3|Adrian|5551108765|312 Degraf Way
#+END_SRC
Let's also add additional data for the remaining tables.
#+BEGIN_SRC js
 // previous code ... 
const vetSeedSQL = `INSERT INTO Veterinarian (name) VALUES
  ("Alice"),
  ("Bob")`;
const petSeedSQL = `INSERT INTO Pet (name, species, breed, owner_id) VALUES
  ("Charlie", "cat", "Tabby", 1),
  ("Echo", "cat", "DSH", 1),
  ("Puppers", "dog", "German Shepherd", 2),
  ("Bubbles", "fish", "Goldfish", 3)`;
const appSeedSQL = `INSERT INTO Appointment (vet_id, pet_id, date) VALUES
  (1, 2, strftime("%s", "now"))
  (3, 1, strftime("%s", "now"))`;

  db.serialize(() => {
    // previous code ... 
    db.run(vetSeedSQL, err => {
      console.log(vetSeedSQL);
      if (err) console.error(err.message);
    });
    db.run(petSeedSQL, err => {
      console.log(petSeedSQL);
      if (err) console.error(err.message);
    });
    db.run(appSeedSQL, err => {
      console.log(appSeedSQL);
      if (err) console.error(err.message);
    });
  });
#+END_SRC
As a quick asside, notice our choice of UNIX epoch time to store dates. This has the advantage that a date can be expressed as a simple integer. Nearly all programming languages have built-in support for generating datetime strings from UNIX epoch input and for this reason it is an extremely portable strategy in situations where the tech stack of an application must rely on sharing of time information between multiple languages. For more information on the history and adoption of UNIX time, see https://en.wikipedia.org/wiki/Unix_time.\\
At this point our source code should be as follows:
#+BEGIN_SRC js
const sqlite3 = require("sqlite3");

const db = new sqlite3.Database("./db/test.db", err => {
  if (err) console.error(err.message);
  console.log("Connected to database.");
});

// TABLE COMMANDS
const petTableSQL = `CREATE TABLE IF NOT EXISTS Pet (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  species TEXT NOT NULL,
  breed TEXT NOT NULL,
  owner_id INTEGER,
  FOREIGN KEY (owner_id) REFERENCES Owner (id)
)`;
const ownTableSQL = `CREATE TABLE IF NOT EXISTS Owner (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  phone INTEGER NOT NULL UNIQUE,
  address TEXT
)`;
const vetTableSQL = `CREATE TABLE IF NOT EXISTS Veterinarian (
  id INTEGER PRIMARY KEY,
  name text
)`;
// NOTE: We will apply UNIX epoch time in our table!
const appTableSQL = `CREATE TABLE IF NOT EXISTS Appointment (
  id INTEGER PRIMARY KEY,
  date INTEGER NOT NULL,
  pet_id INTEGER NOT NULL,
  vet_id INTEGER NOT NULL,
  FOREIGN KEY (vet_id) REFERENCES Veterinarian (id),
  FOREIGN KEY (pet_id) REFERENCES Pet (id)
)`;

// INSERTION COMMANDS
const ownSeedSQL =  `INSERT INTO Owner (name, phone, address) VALUES
  ("Ziggy", 5552349999, "123 Hello Lane"),
  ("Soon-Mi", 5552349922, "321 World Street"),
  ("Adrian", 5551108765, "312 Degraf Way")`;
const vetSeedSQL = `INSERT INTO Veterinarian (name) VALUES
  ("Alice"),
  ("Bob")`;
const petSeedSQL = `INSERT INTO Pet (name, species, breed, owner_id) VALUES
  ("Charlie", "cat", "Tabby", 1),
  ("Echo", "cat", "DSH", 1),
  ("Puppers", "dog", "German Shepherd", 2),
  ("Bubbles", "fish", "Goldfish", 3)`;
const appSeedSQL = `INSERT INTO Appointment (vet_id, pet_id, date) VALUES
  (1, 2, strftime("%s", "now")),
  (3, 1, strftime("%s", "now"))`;

db.serialize(() => {
  db.run(petTableSQL, err => {
    console.log(petTableSQL);
    if (err) console.error(err.message);
  });
  db.run(vetTableSQL, err => {
    console.log(vetTableSQL);
    if (err) console.error(err.message);
  });
  db.run(ownTableSQL, err => {
    console.log(ownTableSQL);
    if (err) console.error(err.message);
  });
  db.run(appTableSQL, err => {
    console.log(appTableSQL);
    if (err) console.error(err.message);
  });
  db.run(ownSeedSQL, err => {
    console.log(ownSeedSQL);
    if (err) console.error(err.message);
  });
  db.run(vetSeedSQL, err => {
    console.log(vetSeedSQL);
    if (err) console.error(err.message);
  });
  db.run(petSeedSQL, err => {
    console.log(petSeedSQL);
    if (err) console.error(err.message);
  });
  db.run(appSeedSQL, err => {
    console.log(appSeedSQL);
    if (err) console.error(err.message);
  });
});

db.close((err) => {
  if (err) console.error(err.message);
  console.log("Closed database connection.");
});
#+END_SRC
Let's completely rebuild the database ...
#+BEGIN_SRC console
$ rm db/test.db && node main.js
#+END_SRC
It is useful to take a moment to examine the state of the database via sqlite3 interpreter before moving on.

**** A Quick Refactoring
Thus far we have simply initialized a database and inserted some seed data. Perhaps it would be fruitful to take this bootstrapping procedure and decouple it from our main application. Let's create a file which we call initDB.js to contain this logic.
#+BEGIN_SRC js
// TABLE COMMANDS
const petTableSQL = `CREATE TABLE IF NOT EXISTS Pet (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  species TEXT NOT NULL,
  breed TEXT NOT NULL,
  owner_id INTEGER,
  FOREIGN KEY (owner_id) REFERENCES Owner (id)
)`;
const ownTableSQL = `CREATE TABLE IF NOT EXISTS Owner (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  phone INTEGER NOT NULL UNIQUE,
  address TEXT
)`;
const vetTableSQL = `CREATE TABLE IF NOT EXISTS Veterinarian (
  id INTEGER PRIMARY KEY,
  name text
)`;
// NOTE: We will apply UNIX epoch time in our table!
const appTableSQL = `CREATE TABLE IF NOT EXISTS Appointment (
  id INTEGER PRIMARY KEY,
  date INTEGER NOT NULL,
  pet_id INTEGER NOT NULL,
  vet_id INTEGER NOT NULL,
  FOREIGN KEY (vet_id) REFERENCES Veterinarian (id),
  FOREIGN KEY (pet_id) REFERENCES Pet (id)
)`;

// INSERTION COMMANDS
const ownSeedSQL =  `INSERT INTO Owner (name, phone, address) VALUES
  ("Ziggy", 5552349999, "123 Hello Lane"),
  ("Soon-Mi", 5552349922, "321 World Street"),
  ("Adrian", 5551108765, "312 Degraf Way")`;
const vetSeedSQL = `INSERT INTO Veterinarian (name) VALUES
  ("Alice"),
  ("Bob")`;
const petSeedSQL = `INSERT INTO Pet (name, species, breed, owner_id) VALUES
  ("Charlie", "cat", "Tabby", 1),
  ("Echo", "cat", "DSH", 1),
  ("Puppers", "dog", "German Shepherd", 2),
  ("Bubbles", "fish", "Goldfish", 3)`;
const appSeedSQL = `INSERT INTO Appointment (vet_id, pet_id, date) VALUES
  (1, 2, strftime("%s", "now")),
  (3, 1, strftime("%s", "now"))`;

function init(db) {
  db.serialize(() => {
    db.run(petTableSQL, err => {
      console.log(petTableSQL);
      if (err) console.error(err.message);
    });
    db.run(vetTableSQL, err => {
      console.log(vetTableSQL);
      if (err) console.error(err.message);
    });
    db.run(ownTableSQL, err => {
      console.log(ownTableSQL);
      if (err) console.error(err.message);
    });
    db.run(appTableSQL, err => {
      console.log(appTableSQL);
      if (err) console.error(err.message);
    });
    db.run(ownSeedSQL, err => {
      console.log(ownSeedSQL);
      if (err) console.error(err.message);
    });
    db.run(vetSeedSQL, err => {
      console.log(vetSeedSQL);
      if (err) console.error(err.message);
    });
    db.run(petSeedSQL, err => {
      console.log(petSeedSQL);
      if (err) console.error(err.message);
    });
    db.run(appSeedSQL, err => {
      console.log(appSeedSQL);
      if (err) console.error(err.message);
    });
  });
}

module.exports = init;
#+END_SRC
And within our main.js file, we can now import this procedure and pass it our db instance.
#+BEGIN_SRC js
const sqlite3 = require("sqlite3");
const initDB = require("./initDB");

const db = new sqlite3.Database("./db/test.db", err => {
  if (err) console.error(err.message);
  console.log("Connected to database.");
});

initDB(db);

db.close((err) => {
  if (err) console.error(err.message);
  console.log("Closed database connection.");
});
#+END_SRC
To simplify the procedure of repeatedly deleting and initializing our database, let's utilize parsing of simple command line arguments in our main function to indicate whether or not we would like to re-initialize the database before further execution. To do this, we utilize inbuilt process.argv object (https://nodejs.org/docs/latest/api/process.html) which exposes command line arguments as strings in our application.
We'll check to see if the third command line string is "INIT", and use this to guard the bootstrapping procedure. We simply index into process.argv at index 2 (zero indexed). Why index 2? console.log(process.argv) and note that the first two arguments stored are the interpreter and program paths respectively.
#+BEGIN_SRC js
if (process.argv[2] === "INIT") {
  console.log("Initializing database...");
  initDB(db);
}
#+END_SRC
Additionally, we will add logic to drop tables on INIT if they happen to already exist. To keep this relatively DRY, we can use a forEach over array of strings. In init function of initDB.js we add the following as the first operation within db.serialize().
#+BEGIN_SRC js
    ["Pet", "Appointment", "Owner", "Veternarian"].forEach((tbl) => {
      db.run(`DROP TABLE IF EXISTS ${tbl}`, err => {
	console.log(`DROPPING TABLE: ${tbl}`);
	if (err) console.error(err.message);
      });
    });
#+END_SRC
Let's also apply the same strategy for our other operations. init(db) should now look like:
#+BEGIN_SRC js
function init(db) {
// DROP EXISTING TABLES
  db.serialize(() => {
    ["Pet", "Appointment", "Owner", "Veternarian"].forEach((tbl) => {
      db.run(`DROP TABLE IF EXISTS ${tbl}`, err => {
	console.log(`DROPPING TABLE: ${tbl}`);
	if (err) console.error(err.message);
      });
    });
// CREATE TABLES
    [petTableSQL, vetTableSQL, ownTableSQL, appTableSQL].forEach((sql) => {
      db.run(sql, err => {
	console.log(sql);
	if (err) console.error(err.message);
      });
    });
// SEED DATA
    [ownSeedSQL, vetSeedSQL, petSeedSQL, appSeedSQL].forEach((sql) => {
      db.run(sql, err => {
	console.log(sql);
	if (err) console.error(err.message);
      });
    });
  });
}
#+END_SRC
At this point, we can initialize and/or rebuild or database at any point by simply running
#+BEGIN_SRC console
$ node main.js INIT
#+END_SRC
and note that simply running
#+BEGIN_SRC console
$ node main.js
#+END_SRC
skips the initialization step. Let's read some data from our database!
**** Reading In Data
With out database initialized, suppose that we wish to pull in any Owners who currently have an appointment scheduled with Veterinarian "Alice". Such a SQL query would look something along the lines of:
#+BEGIN_SRC sqlite
 SELECT (Owner.name) FROM Owner
    JOIN PET ON Pet.owner_id = Owner.id
    JOIN Appointment ON Appointment.pet_id = Pet.id
    JOIN Vertinarian ON Appointment.vet_id = Veterinarian.id
    WHERE Veterinarian.name = "Alice";
#+END_SRC
It should be noted that while db.run() will certainly execute the above SQL, we infact need to use another method provided by our connection, namely db.all(). db.all() will pass the results of a selection in the form of an array of POJO represntations of the relevant rows. The second argument to callback contains this array.
#+BEGIN_SRC js
db.all(selectOwnerFromAppsSQL, (err, rows) => {
  console.log(selectOwnerFromAppsSQL);
  console.log(rows);
  if (err) console.error(err.message);
});
#+END_SRC
And if we run our code
#+BEGIN_SRC console
$ node main.js
>>>
...
        [{ name: "Soon-Mi"}] <-- There it is!
...
#+END_SRC

*** Conclusions
There has to be a better way. The first (possibly naive) idea that comes to mind is implementing functions which take arguments and pass them to interpolated strings expressing our SQL statements. The second, and more powerful idea, is making the observation that to each table we have explicly defined a set of operations for manipulation of SOLELY that data, i.e. creation of tables, addition of data, reading of data, etc... In principle, if we could encapsulate the notion of a given table as a so-called "model" then perhaps all CRUD operations and table properties could be managed in a more convenient way. With this in mind, let's attempt such an abstraction.

** A Naive ORM Implementation
We now seek to encapsulate our rather verbose and cumbersome SQL code into an object-oriented design pattern. As mentioned in our conclusion to part 1, we can first make the observation that to each table in our db is a rather natural notion of "model". By model, we mean a JavaScript representation of the table and its properties. To make such a notion more concrete, let's begin by creating a models.js file and define a class representation of a table's columns.
#+BEGIN_SRC js
class Column {
  constructor(name, type,
	      pk=false, nullable=true,
	      unique=false, references=null) {
    this.name = name;
    this.type = type;
    this.pk = pk;
    this.nullable = nullable;
    this.unique = unique;
    this.references = references;
  }
  static from = (obj) =>
    new Column(obj.name, obj.type, obj.pk, obj.nullable, obj.unique);
}
#+END_SRC
Our static from() method is for the purposes of defining columns in a convenient way as will be seen shortly. We define a class of Model, which is instantiated via a set of Column instances. In the constructor, we invoke static Column.from() method as a bit of syntactic sugar in instantiation of models.
#+BEGIN_SRC js
class Model {
  constructor(tableName, columns) {
    this.tableName = tableName;
    this.columns = columns.map(col => Column.from(col));
  }
}
#+END_SRC
Now we can instantiate models by passing arrays of POJOs representing table columns.
#+BEGIN_SRC js
const Pet = new Model("Pet", [
  {name:"id", type:"INTEGER", pk:true},
  {name:"name", type:"TEXT"},
  {name:"species", type:"TEXT"},
  {name:"breed", type:"TEXT"},
  {name:"owner_id", type:"INTEGER"}
]);
#+END_SRC
Of course, one method that may be of principal interest to us in our Model class is the ability to generate SQL commands which create a Table associated with the model. There are a number of approaches to use here--this is ostensibly an exercise in string manipulation. I provide one such solution here:
#+BEGIN_SRC js
class Model {
  constructor(tableName, columns) {
    this.tableName = tableName;
    this.columns = columns.map(col => Column.from(col));
  }
  _handleComma = (i) => !i ? "" : ",";
  sqlCreate = () => {
    return this.columns.reduce((cmd, col, i) => {
      const nameType = ` ${this._handleComma(i)} ${col.name} ${col.type}`;
      const pk = col.pk ? " PRIMARY KEY" : "";
      const nullable = col.nullable ? "" : "NOT NULL";
      const unique = col.unique ? "UNIQUE" : "";
      return cmd += nameType + pk + nullable + unique;
    }, `CREATE TABLE IF NOT EXISTS ${this.tableName} (`) + ")";
  }
}
#+END_SRC
If we were to log this method... i.e.
#+BEGIN_SRC js
const Pet = new Model("Pet", [
  {name:"id", type:"INTEGER", pk:true},
  {name:"name", type:"TEXT"},
  {name:"species", type:"TEXT"},
  {name:"breed", type:"TEXT"},
  {name:"owner_id", type:"INTEGER"}
]);

console.log(Pet.sqlCreate());
#+END_SRC
We would receive the following output.
#+BEGIN_SRC sqlite
CREATE TABLE IF NOT EXISTS Pet (  id INTEGER PRIMARY KEY , name TEXT , species TEXT , breed TEXT , owner_id INTEGER)
#+END_SRC
Success! At least, in principle we do indeed have an object-oriented JavaScript abstraction which can be "compiled" (I use this term loosely) to raw SQL.
